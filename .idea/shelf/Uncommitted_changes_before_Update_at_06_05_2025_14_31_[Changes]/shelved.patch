Index: movement.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import colorRecognition\r\nimport numpy as np\r\nimport urx\r\nimport time\r\n\r\nclass RobotControl:\r\n    def __init__(self):\r\n\r\n\r\n        self.rob = urx.Robot(\"192.168.0.100\")\r\n        self.rob.set_tcp((0, 0, 0.142, 0, 0, 0))  # add tool schunk\r\n        self.rob.set_payload(2, (0, 0, 0.1))\r\n        time.sleep(0.2)  # leave some time to robot to process the setup commands\r\n\r\n        # Define base coordinates for the grid\r\n        self.x_base = 0.305704  # Base x-coordinate\r\n        self.y_base = -0.288771 # Base y-coordinate\r\n        self.z_base = 0.28589  # Base z-coordinate (table height)\r\n\r\n        # Define cell dimensions in robot coordinates\r\n        self.cell_width = 0.04695  # Cell width in meters\r\n        self.cell_height = 0.069813  # Cell height in meters\r\n\r\n        # Define approach distance (how far above object to position before going down)\r\n        self.approach_distance = 0.010  # 5cm above object\r\n\r\n        # Define home position\r\n        self.home_position = (340.479962, -360.100958, 93.090019, -127.279181, 127.279191, -0.122425)\r\n\r\n\r\n    def move_to_home(self):\r\n        print(\"home position\")\r\n        self.rob.movel(self.home_position, 0.3, 0.2)\r\n\r\n    def close(self):\r\n        self.rob.close()\r\n\r\n    def move(self, a=0.3, v=0.2):\r\n        # Get red box positions from color recognition module\r\n        print(\"Getting red box positions from camera...\")\r\n        red_positions = colorRecognition.get_grid_state()\r\n\r\n        print(f\"Detected {len(red_positions)} red positions: {red_positions}\")\r\n\r\n        self.move_to_home()\r\n        i = 0\r\n        for col, row in red_positions:\r\n            # Calculate pickup position\r\n            pickup_x = self.x_base + (col * self.cell_width)\r\n            pickup_y = self.y_base + (row * self.cell_height)\r\n            pickup_z = self.z_base\r\n\r\n            # Calculate approach positions (slightly above objects)\r\n            pickup_approach = (pickup_x, pickup_y, pickup_z + self.approach_distance, 0, 3.14, 0)\r\n\r\n            # Destination position (here we're placing all objects at column 0)\r\n            drop_x = self.x_base\r\n            drop_y = self.y_base + (i * self.cell_height)\r\n            drop_z = self.z_base\r\n            drop_approach = (drop_x, drop_y, drop_z + self.approach_distance, 0, 3.14, 0)\r\n            print(f\"Moving from position [{col}, {row}] to position [i]\")\r\n            i += 1\r\n\r\n\r\n            # Move to approach position above pickup\r\n            self.rob.movel(pickup_approach, a, v)\r\n\r\n            # Move down to pickup object\r\n            pickup_position = (pickup_x, pickup_y, pickup_z, 0, 3.14, 0)\r\n            self.rob.movel(pickup_position, a / 2, v / 2)\r\n\r\n            # Activate gripper\r\n            time.sleep(0.5)  # Replace\r\n\r\n            self.rob.movel(pickup_approach, a / 2, v / 2)\r\n\r\n            # Move to approach position\r\n            self.rob.movel(drop_approach, a, v)\r\n\r\n            # place object\r\n            drop_position = (drop_x, drop_y, drop_z, 0, 3.14, 0)\r\n            self.rob.movel(drop_position, a / 2, v / 2)  # Slower for precision\r\n\r\n            # open gripper\r\n            time.sleep(0.5)  # Replace with actual gripper control\r\n\r\n            # back up\r\n            print(\"Moving back up...\")\r\n            self.rob.movel(drop_approach, a / 2, v / 2)\r\n\r\n            # Return to home position between operations\r\n            self.move_to_home()\r\n\r\n    def wait_for_program(self):\r\n        while True:\r\n            time.sleep(0.1)  # sleep first since the robot may not have processed the command yet\r\n            if self.rob.is_program_running():\r\n                break\r\n\r\n\r\n# Example usage\r\nif __name__ == \"__main__\":\r\n    try:\r\n        print(\"Initializing robot control...\")\r\n        robot = RobotControl()\r\n\r\n        print(\"Moving to home position...\")\r\n        robot.move_to_home()\r\n\r\n        print(\"Starting pick and place operations...\")\r\n        robot.move()\r\n\r\n        print(\"Operations completed successfully!\")\r\n\r\n    except Exception as e:\r\n        print(f\"Error: {e}\")\r\n    finally:\r\n        try:\r\n            print(\"Closing robot\")\r\n            robot.close()\r\n        except:\r\n            pass\r\n        print(\"Program terminated\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/movement.py b/movement.py
--- a/movement.py	(revision d5337aabec826b6396536a23e15ab14f1017026b)
+++ b/movement.py	(date 1746534550556)
@@ -34,7 +34,7 @@
 
     def close(self):
         self.rob.close()
-
+s
     def move(self, a=0.3, v=0.2):
         # Get red box positions from color recognition module
         print("Getting red box positions from camera...")
